Classfile /Users/xudong/IdeaProjects/JAVA-000/out/production/JAVA-000/jvm/Calculation.class
  Last modified 2020年10月21日; size 628 bytes
  SHA-256 checksum ead8dc5fb8286aa504243a28475253479874faf1994474655ea5707a0ac305ab
  Compiled from "Calculation.java"
public class jvm.Calculation
  minor version: 0
  major version: 58
  flags: (0x0021) ACC_PUBLIC, ACC_SUPER
  this_class: #7                          // jvm/Calculation
  super_class: #2                         // java/lang/Object
  interfaces: 0, fields: 0, methods: 3, attributes: 1
Constant pool:
   #1 = Methodref          #2.#3          // java/lang/Object."<init>":()V
   #2 = Class              #4             // java/lang/Object
   #3 = NameAndType        #5:#6          // "<init>":()V
   #4 = Utf8               java/lang/Object
   #5 = Utf8               <init>
   #6 = Utf8               ()V
   #7 = Class              #8             // jvm/Calculation
   #8 = Utf8               jvm/Calculation
   #9 = Methodref          #7.#3          // jvm/Calculation."<init>":()V
  #10 = Methodref          #7.#11         // jvm/Calculation.add:()I
  #11 = NameAndType        #12:#13        // add:()I
  #12 = Utf8               add
  #13 = Utf8               ()I
  #14 = Utf8               Code
  #15 = Utf8               LineNumberTable
  #16 = Utf8               LocalVariableTable
  #17 = Utf8               this
  #18 = Utf8               Ljvm/Calculation;
  #19 = Utf8               i
  #20 = Utf8               I
  #21 = Utf8               count
  #22 = Utf8               StackMapTable
  #23 = Utf8               main
  #24 = Utf8               ([Ljava/lang/String;)V
  #25 = Utf8               args
  #26 = Utf8               [Ljava/lang/String;
  #27 = Utf8               calculation
  #28 = Utf8               SourceFile
  #29 = Utf8               Calculation.java
{
  public jvm.Calculation();
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object."<init>":()V
         4: return
      LineNumberTable:
        line 3: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Ljvm/Calculation;

  public int add();
    descriptor: ()I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=3, args_size=1
         0: iconst_0
         1: istore_1
         2: iconst_0
         3: istore_2
         4: iload_2
         5: bipush        10
         7: if_icmpgt     20
        10: iload_1
        11: iload_2
        12: iadd
        13: istore_1
        14: iinc          2, 1
        17: goto          4
        20: iload_1
        21: ireturn
      LineNumberTable:
        line 5: 0
        line 6: 2
        line 7: 10
        line 6: 14
        line 9: 20
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            4      16     2     i   I
            0      22     0  this   Ljvm/Calculation;
            2      20     1 count   I
      StackMapTable: number_of_entries = 2
        frame_type = 253 /* append */
          offset_delta = 4
          locals = [ int, int ]
        frame_type = 250 /* chop */
          offset_delta = 15

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=3, args_size=1
         0: new           #7                  // class jvm/Calculation
         3: dup
         4: invokespecial #9                  // Method "<init>":()V
         7: astore_1
         8: aload_1
         9: invokevirtual #10                 // Method add:()I
        12: istore_2
        13: return
      LineNumberTable:
        line 13: 0
        line 14: 8
        line 15: 13
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      14     0  args   [Ljava/lang/String;
            8       6     1 calculation   Ljvm/Calculation;
           13       1     2   add   I
}
SourceFile: "Calculation.java"

add()
0: iconst_0                 将0送到栈顶
1: istore_1                 将栈顶的值存入变量1
2: iconst_0                 将0送到栈顶
3: istore_2                 将栈顶的值存入变量2
4: iload_2                  将变量2的值压人栈
5: bipush        10         将单字节的常量值(-128~127)推送至栈顶
7: if_icmpgt     20         比较栈顶两int型数值大小，当结果大于0时跳转 指令20位置
10: iload_1                 将变量1的值压人栈
11: iload_2                 将变量2的值压人栈
12: iadd                    栈顶前两个值相加压人栈
13: istore_1                将栈顶的值存入变量1
14: iinc          2, 1      非静态函数的第2个变量(从0开始计数)
17: goto          4         无条件跳转到 指令4位置
20: iload_1                 将变量1的值压人栈
21: ireturn                 从当前方法返回int
